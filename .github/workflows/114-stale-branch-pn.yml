name: Stale Branch Notifier

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * 1'  # Every Monday at 1AM UTC

jobs:
  stale-branch-check:
    runs-on: ubuntu-latest
    env:
      GIT_CLI_TOKEN: ${{ vars.GIT_CLI_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install python-dotenv requests

      - name: Step 1 - Identify stale branches
        run: |
          set -e
      
          REPO="kirantatti2803/github-actions-course"
          PROTECTED_BRANCHES=("main" "development" "test")
          STALE_DAYS=1
          GRACE_PERIOD_DAYS=7
          echo "$GIT_CLI_TOKEN"
          echo $GIT_CLI_TOKEN
          # Check GITHUB_TOKEN
          if [ -z "$GIT_CLI_TOKEN" ]; then
            echo "❌ GIT_CLI_TOKEN not set!"
            exit 1
          fi
      
          HEADERS=(
            -H "Authorization: token $GIT_CLI_TOKEN"
            -H "Accept: application/vnd.github+json"
          )
      
          TODAY=$(date -u +"%s")
          REPORT_DIR="_github_workflow"
          REPORT_FILE="$REPORT_DIR/stale_branch_report.txt"
          CSV_FILE="stale_branches.csv"
      
          mkdir -p "$REPORT_DIR"
          echo "Branch Name,Email,Author,Age,Deletion Date" > "$REPORT_FILE"
          : > "$CSV_FILE"
      
          echo "🔍 Fetching branches for $REPO..."
          BRANCHES=$(curl -s "${HEADERS[@]}" "https://api.github.com/repos/${REPO}/branches")
      
          echo "$BRANCHES" | jq -c '.[]' | while read -r branch; do
            NAME=$(echo "$branch" | jq -r '.name')
      
            # Skip protected branches
            if [[ " ${PROTECTED_BRANCHES[*]} " =~ " ${NAME} " ]]; then
              continue
            fi
      
            SHA=$(echo "$branch" | jq -r '.commit.sha')
            COMMIT_DATA=$(curl -s "${HEADERS[@]}" "https://api.github.com/repos/${REPO}/commits/${SHA}")
      
            AUTHOR=$(echo "$COMMIT_DATA" | jq -r '.commit.author.name')
            EMAIL=$(echo "$COMMIT_DATA" | jq -r '.commit.author.email')
            DATE_STR=$(echo "$COMMIT_DATA" | jq -r '.commit.author.date')
      
            if [ -z "$EMAIL" ] || [ -z "$DATE_STR" ]; then
              continue
            fi
      
            COMMIT_DATE=$(date -d "$DATE_STR" +"%s")
            AGE_DAYS=$(( (TODAY - COMMIT_DATE) / 86400 ))
      
            if [ "$AGE_DAYS" -gt "$STALE_DAYS" ]; then
              DELETE_DATE=$(date -d "+${GRACE_PERIOD_DAYS} days" +"%Y-%m-%d")
              LINE="$NAME,$EMAIL,$AUTHOR,$AGE_DAYS days old, Delete on $DELETE_DATE"
              echo "$LINE" >> "$REPORT_FILE"
              echo "$NAME,$EMAIL,$DELETE_DATE" >> "$CSV_FILE"
            fi
          done
      
          echo "✅ Stale branch scan complete."
          echo "📄 Report:"
          cat "$REPORT_FILE"
        env:
         GIT_CLI_TOKEN: ${{ vars.GIT_CLI_TOKEN }}

      - name: Upload stale branch report
        uses: actions/upload-artifact@v4
        with:
           name: stale-branch-report
           path: |
             _github_workflow/stale_branch_report.txt
             stale_branches.csv

      
#     - name: Step 2 - Send Email via AWS SES
#       if: success() && hashFiles('_github_workflow/stale_branch_report.txt') != ''
#       uses: xxxxxxxxx
#       with:
#         subject: "Stale Branches Report for GitHub Repository"
#         body: "Attached is the list of stale branches identified for cleanup."
#         recipient-emails: 'test'
#        sender-email: ''
#         email-attachments: '${{ runner.workspace }}/_github_workflow/stale_branch_report.txt'
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
#         AWS_REGION: 'us-east-1'

      - name: Step 3 - Delete branches past grace period
        run: |
            set -e

            REPO="kirantatti2803/github-actions-course"
            CSV_FILE="stale_branches.csv"

            if [ -z "$GIT_CLI_TOKEN" ]; then
                echo "❌ GIT_CLI_TOKEN not set!"
                exit 1
            fi

            HEADERS=(
                -H "Authorization: token $GIT_CLI_TOKEN"
                -H "Accept: application/vnd.github+json"
            )

            TODAY=$(date -u +"%Y-%m-%d")

            if [ ! -f "$CSV_FILE" ]; then
                echo "📄 No $CSV_FILE found."
                exit 0
            fi

            # Temp file to keep undeletable branches
            TMP_FILE="temp_stale_branches.csv"
            : > "$TMP_FILE"

            while IFS=',' read -r NAME EMAIL DELETE_DATE; do
                if [ "$DELETE_DATE" != "" ] && [ "$(date -d "$DELETE_DATE" +%s)" -le "$(date -d "$TODAY" +%s)" ]; then
                echo "🧹 Deleting branch: $NAME"
                DELETE_URL="https://api_
